import streamlit as st
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt

st.set_page_config(page_title="SVR PROJECT GP DASHBOARD", layout="wide")
logo = Image.open("logo.png")

title_col, logo_col = st.columns([5, 1])
with title_col:
    st.title("üìä SVR PROJECT GP DASHBOARD")
with logo_col:
    st.image(logo, width=130)

# GP committed mapping per project
gp_committed_map = {
    "GRAND SVR": 30.60,
    "SVR VILLAGE 58": 29.39,
    "SVR PARK 76": 28.40,
    "SVR VILLAGE SAI-NOI": 26.73,
    "SVR NP-ASSUMPTION": 25.36,
    "SVR HYDE BK": 32.00,
    "SVR HYDE S3": 27.07
}

df = pd.read_excel("Corporate_Project_Template.xlsx")
projects = df["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"].unique()
selected_project = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", projects)

# Get GP committed for the selected project
gp_committed = gp_committed_map.get(selected_project, 27.00)

project_df = df[df["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] == selected_project].copy()
available_rooms = project_df["‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á"].astype(str).tolist()
selected_rooms = st.multiselect("üîé ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏π‡∏ô‡∏¥‡∏ï (Room No.) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", available_rooms)

use_agent_pricing = st.checkbox("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö agent")

if selected_rooms:
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    unit_df = project_df[project_df["‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á"].astype(str).isin(selected_rooms)].copy()

    if use_agent_pricing:
        if all(col in unit_df.columns for col in ["asking price", "‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°", "bottom price"]):
            unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent"] = (
                (unit_df["asking price"] - (unit_df["asking price"] * 0.0027)) + (unit_df["‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á"] * 24)
            ).round(2)

            unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà GP 14%"] = (unit_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"] / 0.86).round(2)

            user_prices = []
            st.subheader("‚úçÔ∏è ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏¢‡∏π‡∏ô‡∏¥‡∏ï")
            for idx, row in unit_df.iterrows():
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write(f"‡∏¢‡∏π‡∏ô‡∏¥‡∏ï: {row['‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á']}")
                with col2:
                    user_price = st.number_input(
                        label=f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏π‡∏ô‡∏¥‡∏ï {row['‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á']}",
                        min_value=0.0,
                        step=10000.0,
                        key=f"user_price_{row['‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á']}"
                    )
                    user_prices.append(user_price)

            unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠"] = user_prices
            unit_df["GP ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠ (%)"] = ((unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠"] - unit_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"]) / unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠"] * 100).round(2)
            unit_df["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤"] = (unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠"] - unit_df["bottom price"]).round(2)
            unit_df["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á GP (%)"] = (unit_df["GP ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠ (%)"] - gp_committed).round(2)

            st.markdown("---")
            st.subheader("üßæ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏¢‡∏π‡∏ô‡∏¥‡∏ï (Styled Summary)")
            for idx, row in unit_df.iterrows():
                bg_color = "#f9f9f9"
                st.markdown(f"""
                <div style='border: 1px solid #cce5ff; background-color: {bg_color}; padding: 1rem; border-radius: 10px; margin-bottom: 1rem;'>
                    <strong>‡∏¢‡∏π‡∏ô‡∏¥‡∏ï:</strong> {row['‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á']}<br>
                    <strong>Bottom Price:</strong> {row['bottom price']:,} ‡∏ö‡∏≤‡∏ó<br>
                    <strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠:</strong> {row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠']:,} ‡∏ö‡∏≤‡∏ó<br>
                    <strong>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> <span style='color: {"red" if row["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤"] < 0 else "green"}'>{row["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤"]:,}</span> ‡∏ö‡∏≤‡∏ó<br><br>
                    <strong>GP (‡∏£‡∏≤‡∏¢‡πÅ‡∏õ‡∏•‡∏á):</strong> {row["GP ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠ (%)"]:.2f}%<br>
                    <strong>GP (Committed):</strong> {gp_committed:.2f}%<br>
                    <strong>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á GP:</strong> <span style='color: {"red" if row["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á GP (%)"] < 0 else "green"}'>{row["‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á GP (%)"]:+.2f}%</span><br>
                </div>
                """, unsafe_allow_html=True)

            st.markdown("---")

            sum_cost = unit_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°"].sum()
            sum_user_price = unit_df["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠"].sum()
            gp_project = ((sum_user_price - sum_cost) / sum_user_price * 100).round(2) if sum_user_price > 0 else 0

            st.subheader("üìä GP ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
            st.markdown(f"""
                <div style='border: 2px solid #2ecc71; padding: 1rem; border-radius: 10px; background-color: #eafff5; text-align: center;'>
                    <h3 style='margin: 0;'>GP ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: <span style='color: {"red" if gp_project < gp_committed else "green"}'>{gp_project:.2f}%</span></h3>
                    <p style='margin: 0;'>GP Committed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ: {gp_committed:.2f}%</p>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: asking price, ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á, ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°, bottom price")
    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö agent'")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")